#!/usr/bin/env python3
# encoding: utf-8

# Copyright (c) 2025 Thomas Killer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os
import codecs
import argparse
import sys
import json
import re

def list_of_strings(arg):
    return arg.split(",")

def unescaped_str(arg_str):
    return codecs.decode(str(arg_str), 'unicode_escape')

parser = argparse.ArgumentParser(description = "Forward git commands to multiple repositories")
parser.add_argument("--file", default = ".git-multi-repos", help = "json file definition of repositories")
parser.add_argument("--update", action="store_true", help = "update the json file definition of repositories from local folders")
parser.add_argument("--omit", type=list_of_strings, default = [], help = "omit git command for certain local repository folders")
parser.add_argument("other", nargs="?", type=unescaped_str, default = [], help="additional arguments passed to git")
args, unknown_args = parser.parse_known_args()
        
repos = {}

if args.file and os.path.isfile(args.file):
    try:
        with open(args.file, "r") as json_file:
            json_content = json.load(json_file)
            if isinstance(json_content, dict):
                repos = json_content
    except Exception as e:
        print(f"An error occurred: {e}")    
else:
    for dir in os.listdir():
        git_config_file = os.path.join(dir, ".git", "config")
        if os.path.isfile(git_config_file):
            repos[dir] = None

if args.update:
    git_url_pattern = re.compile(r"^.*url\s?=\s?(.+)$")
    for dir in repos:
        try:
            git_config_file = os.path.join(dir, ".git", "config")
            if os.path.isfile(git_config_file):
                for i, line in enumerate(open(git_config_file, "r")):
                    match = re.search(git_url_pattern, line)
                    if match:
                        repos[dir] = match.group(1)
                        break
        except Exception as e:
            print(f"An error occurred: {e}")    
    try:
        with open(args.file, "w") as json_file:
            json.dump(repos, json_file, indent=2)
    except Exception as e:
        print(f"An error occurred: {e}")    

if args.other:
    escapeArgs = [(lambda arg: f"\"{str(arg)}\"" if ' ' in arg else arg)(i) for i in unknown_args]
    for dir in repos:
        if dir in args.omit:
            print(f"omitting {dir}")
        else:
            if args.other == "clone":
                if repos[dir]:
                    command = f"git clone {repos[dir]} {dir} {' '.join(escapeArgs)}"
                else:
                    print(f"git url for repo {dir} missing!")
            else:
                command = f"git -C {dir} {args.other} {' '.join(escapeArgs)}"
            print(command)
            os.system(command)
