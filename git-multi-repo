#!/usr/bin/env python3
import os
import argparse
import json
import re

def list_of_strings(arg):
    return arg.split(",")

parser = argparse.ArgumentParser(description = "Forward git commands to multiple repositories")
parser.set_defaults(update=False)
parser.add_argument("--file", default = ".git-multi-repos", help = "json file definition of repositories")
parser.add_argument("--update", action="store_true", help = "update the json file definition of repositories from local folders")
parser.add_argument("--omit", type=list_of_strings, default = [], help = "omit git command for certain local repository folders")
parser.add_argument("other", nargs="?", default = [], help="additional arguments passed to git")
args, unknown_args = parser.parse_known_args()

repos = {}

if args.file and os.path.isfile(args.file):
    try:
        with open(args.file, "r") as json_file:
            json_content = json.load(json_file)
            if isinstance(json_content, dict):
                repos = json_content
    except Exception as e:
        print(f"An error occurred: {e}")    
else:
    for dir in os.listdir():
        git_config_file = os.path.join(dir, ".git", "config")
        if os.path.isfile(git_config_file):
            repos[dir] = None

if args.update:
    git_url_pattern = re.compile(r"^.*url\s?=\s?(.+)$")
    for dir in repos:
        try:
            git_config_file = os.path.join(dir, ".git", "config")
            if os.path.isfile(git_config_file):
                for i, line in enumerate(open(git_config_file, "r")):
                    match = re.search(git_url_pattern, line)
                    if match:
                        repos[dir] = match.group(1)
                        break
        except Exception as e:
            print(f"An error occurred: {e}")    
    try:
        with open(args.file, "w") as json_file:
            json.dump(repos, json_file, indent=2)
    except Exception as e:
        print(f"An error occurred: {e}")    

if args.other:
    for dir in repos:
        if dir in args.omit:
            print(f"omitting {dir}")
        else:
            if args.other == "clone":
                if repos[dir]:
                    command = f"git clone {repos[dir]} {dir} {' '.join(unknown_args)}"
                else:
                    print(f"git url for repo {dir} missing!")
            else:
                command = f"git -C {dir} {args.other} {' '.join(unknown_args)}"
            print(command)
            os.system(command)
